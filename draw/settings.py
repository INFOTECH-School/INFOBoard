"""
Django settings for draw project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
from pathlib import Path
from typing import Any, Dict, List, Union

from django.core.exceptions import ImproperlyConfigured
from django.utils.log import DEFAULT_LOGGING
from os import environ as env

from draw.utils import StrLike, TrustedOrigins, deepmerge

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS: List[str] = ['localhost', '127.0.0.1']

INTERNAL_IPS = ['127.0.0.1']

# Configure https reverse proxy
# https://docs.djangoproject.com/en/4.0/ref/settings/#secure-proxy-ssl-header

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'collab',
    'dash',
    'social_django',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

WS_MIDDLEWARE = [
    'channels.security.websocket.AllowedHostsOriginValidator',
    'channels.auth.AuthMiddlewareStack',
    'channels.sessions.SessionMiddlewareStack',
]

ROOT_URLCONF = 'draw.urls'
CHANNELS_URLCONF = 'draw.urls_ws'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'draw' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dash.context_processors.version',
                'dash.context_processors.year',
            ],
        },
    },
]

WSGI_APPLICATION = 'draw.wsgi.application'
ASGI_APPLICATION = 'draw.asgi.application'

# Logging
# https://docs.djangoproject.com/en/3.2/topics/logging/

LOGGING = deepmerge(DEFAULT_LOGGING, {
    'formatters': {
        'draw.websocket': {
            '()': 'draw.utils.WebSocketFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'draw.websocket': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'draw.websocket',
        },
    },
    'loggers': {
        'draw.websocket': {
            'handlers': ['draw.websocket'],
            'level': 'INFO',
            'propagate': False,
        }
    }
})

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES: Dict[str, Dict[str, Union[StrLike, Dict[str, StrLike]]]] = {}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Channel Layers
# https://channels.readthedocs.io/en/latest/topics/channel_layers.html

CHANNEL_LAYERS: Dict[str, Dict[str, Any]]

# Session Engine
# https://docs.djangoproject.com/en/dev/topics/http/sessions/#configuring-the-session-engine

SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#auth-custom-user
AUTH_USER_MODEL = 'collab.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'de-DE'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'static_copy'

STATICFILES_DIRS = [
    BASE_DIR / 'client' / 'dist',
    BASE_DIR / 'draw' / 'static',
]

# Media Uploads

MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Create custom room when user visits the index page
SHOW_CREATE_ROOM_PAGE = False

IMPRINT_URL = None

# Allow the creation of rooms when the user visits the index page without a room query (?room=...)
ALLOW_AUTOMATIC_ROOM_CREATION = False

# If set to false, users will need to be logged in.
ALLOW_ANONYMOUS_VISITS = False

# This sets the default value for complete pointer and element tracking (Log Records)
ENABLE_TRACKING_BY_DEFAULT = True
ENABLE_TRACKING_BY_DEFAULT_FOR_LTI = True

# how often the clients are going to broadcast updates on change (milliseconds)
BROADCAST_RESOLUTION_THROTTLE_MSEC = 100

# how many seconds after a change clients will wait before issuing a save command (milliseconds)
SAVE_ROOM_MAX_WAIT_MSEC = 15_000

# how many groups there are allowd in a group assignment
MAX_GROUPS = 50

# call this from your custom settings
def finalize_settings(final_locals: Dict[str, Any]):
    required_vars = {'SECRET_KEY', 'DATABASES', 'TIME_ZONE', 'LINK_BASE'}
    missing = required_vars.difference(final_locals.keys())
    if missing:
        raise ImproperlyConfigured(
            f'The following mandatory keys are missing from your config: {missing}')

SOFT_VERSION = '1.0.2-beta'
NOW_YEAR = datetime.datetime.now().year

LOGIN_URL = 'custom_login'
LOGIN_REDIRECT_URL = '/my'
LOGOUT_REDIRECT_URL = 'custom_login'

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',  # for Google OAuth2
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env.get("HC_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env.get("HC_GOOGLE_OAUTH2_SECRET")
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'collab.pipeline.update_profile_picture',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/my'

X_FRAME_OPTIONS = 'SAMEORIGIN'

# CORS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:3000",
    "http://127.0.0.1:8000",
    'https://tablica.infotech.edu.pl',
    'http://10.192.192.1',
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:3000",
    "http://127.0.0.1:8000",
    'https://tablica.infotech.edu.pl',
    'http://10.192.192.1',
]
