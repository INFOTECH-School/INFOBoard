# Generated by Django 4.2.19 on 2025-02-23 22:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExcalidrawLogRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_compressed', models.BooleanField(editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('room_name', models.UUIDField()),
                ('event_type', models.CharField(max_length=50)),
                ('user_pseudonym', models.CharField(help_text='this is generated from draw.utils.user_id_for_room', max_length=64, null=True, validators=[django.core.validators.MinLengthValidator(64)])),
                ('_content', models.BinaryField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExcalidrawRoom',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('room_name', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('tracking_enabled', models.BooleanField(default=True, verbose_name="track users' actions")),
                ('_elements', models.BinaryField(blank=True, default=b'x\x9c\x8b\x8e\x05\x00\x01\x15\x00\xb9')),
                ('user_room_name', models.CharField(default='bHTrj0Y96MeJMCavF', max_length=24)),
                ('room_created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BoardGroups',
            fields=[
                ('group_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('class_name', models.CharField(default='default', max_length=50)),
                ('class_year', models.IntegerField(default=2025)),
                ('code', models.CharField(default=0, editable=False, max_length=10, unique=True)),
                ('category', models.CharField(choices=[('podstawowa', 'podstawowa'), ('średnio-zaawansowana', 'średnio-zaawansowana'), ('zaawansowana', 'zaawansowana')], default='podstawowa', max_length=50)),
                ('boards', models.ManyToManyField(related_name='boards', to='collab.excalidrawroom')),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='owner_group', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(related_name='users_group', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Pseudonym',
            fields=[
                ('user_pseudonym', models.CharField(help_text='this is generated from draw.utils.user_id_for_room', max_length=64, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(64)])),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='collab.excalidrawroom', verbose_name='room name')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'unique_together': {('room', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ExcalidrawFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('element_file_id', models.CharField(max_length=40)),
                ('content', models.FileField(upload_to='excalidraw-uploads')),
                ('meta', models.JSONField(verbose_name='excalidraw meta data')),
                ('belongs_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='collab.excalidrawroom', verbose_name='belongs to room')),
            ],
            options={
                'unique_together': {('belongs_to', 'element_file_id')},
            },
        ),
    ]
